import pandas as pd
from pathlib import Path
import os
from scripts.samples_auto import read_sample
from datetime import datetime

# datetime object containing current date and time, used for naming config file
now = datetime.now()
saved_config = 'results/config_used/config_'+now.strftime("%y-%m-%d_%H")+'.yaml'

# load the configuration file
configfile: 'config/config.yaml'

# mask the reference genome? Reference variables used for mapping.
if config['mask_reference']:
  ref_file = Path(config['masked_ref'])
  ref_file_idx = Path(ref_file).with_suffix('.fa.fai')
else:
  ref_file = Path(config['reference'+'_'+config['genome_version']]['fasta'])
  ref_file_idx = Path(config['reference'+'_'+config['genome_version']]['index'])

# load the panel design file
bedpath = Path(config['panel_design'])
bedname = os.path.splitext(os.path.basename(bedpath))[0]

# load sample sheet from a TSV file or create new from samples in 'data' folder
if config['data']['sample_sheet_path']:
  samples = pd.read_csv(config['data']['sample_sheet_path'], index_col = 'sample', sep = '\t')
elif config['samples_in_directory']:
  samples = read_sample(config['data']['samples_in_directory'])
else:
  print('no samples detected')
wc = samples.index # store samples in wildcard


# different lanes?
if config['different_lanes']:
  # remove the _L001 and _L002 from the sample names
  samples_without_lanes = [s.split('_L')[0] for s in wc]
  # unique names and sorted
  samples_without_lanes = sorted(set(samples_without_lanes))
  # create a new dataframe with the unique names and the different lanes in the additional columns
  new_samples = pd.DataFrame(index = samples_without_lanes, columns = ['lane1', 'lane2'])
  for sample in samples_without_lanes:
      new_samples.loc[sample, 'lane1'] = sample + '_L001'
      new_samples.loc[sample, 'lane2'] = sample + '_L002'
  samples_for_calling = new_samples
  # save to a file in resources/data
  new_samples.to_csv('resources/data/samples_merged_lanes.tsv', sep = '\t')
else:
  samples_for_calling = samples


# location of conda environments
if config['conda_envs']['use_existing_envs']:
  env_prefix = ''
  env_suffix = ''
else:
  env_prefix = '../envs/'
  env_suffix = '.yaml'

# including UMIs?
if config['contain_UMIs']:
  BAMs_no_PCR_flags = 'results/umi_mapping/{sample}_8_clipbam.bam'
else:
  BAMs_no_PCR_flags = 'results/mapped/{sample}.bam'

# hybrid- or amplicon-capture?
if config['amplicon']:
  BAMs_for_CNV_calling = BAMs_no_PCR_flags
elif config['different_lanes']:
  BAMs_for_CNV_calling = 'results/merged_bam/{sample}.bam'
else:
  BAMs_for_CNV_calling = 'results/mapped_marked/{sample}.bam'

# location for BAM indices
BAM_index_for_CNV_calling = BAMs_for_CNV_calling + '.bai'

# location for reference genome indices
stem = str(Path('resources') / 'reference' / ref_file.stem) if config['compute_bwa_indices'] else config['reference'+'_'+config['genome_version']]["bwa_indices"]

# first run with generic reference or second run with PON for CNVkit?
if config['pon']['second_run_with_pon']:
  suffix = '_'+config['pon']['directory_suffix']+'_pon' # add results to new folders with suffix
else:
  suffix=''
  include: 'rules/trimming_fastqc.smk'
  include: 'rules/map_bwa.smk'
  include: 'rules/umi_mapping.smk'
  include: 'rules/mutect2.smk'
  include: 'rules/qc_map.smk'
  include: 'rules/stats.smk'
  include: 'rules/map_bowtie2.smk'
  include: 'rules/bcf.smk'
  include: 'rules/mask_ref.smk'

# include in any case
include: 'rules/cnvkit.smk'
include: 'rules/purecn.smk'
include: 'rules/additional_analyses.smk'

if config['pon_rds']['use_true_pon_instead']:
  include: 'rules/cnv_calling_with_true_pon.smk'
  rule all:
    input:
      expand('results/cnv_calling_with_true_pon/purecn/CBS/{sample}/{sample}.csv', sample=samples_for_calling.index)
else:
  rule all:
    input:
      saved_config, # save the used configuration file

      # expand('results/ploidyngs/{sample}/{sample}_MaxDepth100_MinCov0.tab', sample = samples_for_calling.index),

      # for merging different lanes from the same samples after alignment
      # expand('results/merged_bam/{sample_stripped}.bam.bai', sample_stripped = samples_for_calling.index),

      # for QC analysis only
      # 'results/qc_map_bwa/multiqc_report.html', # mapping QC with qualimap
      # 'results/qc/multiqc_report_fastqc.html', # qc report for reads, untrimmed and trimmed


      # # for CNA calling

      # # CNVkit's CBS
      expand('results/cnvkit'+suffix+'/cbs/{sample}_diagram.cnv.pdf', sample=samples_for_calling.index),
      expand('results/cnvkit'+suffix+'/cbs/{sample}_scatter.cnv.png', sample=samples_for_calling.index),
      expand('results/cnvkit'+suffix+'/cbs/{sample}.icns', sample=samples_for_calling.index),
      'results/cnvkit'+suffix+'/cbs/heatmap.cnv.pdf',
      # ## w/ PureCN's PSCBS
      # expand('results/purecn'+suffix+'/cbs_PSCBS/{sample}/{sample}.csv', sample=samples_for_calling.index),
      # ## w/ PureCN's Hclust
      # expand('results/purecn'+suffix+'/cbs_Hclust/{sample}/{sample}.csv', sample=samples_for_calling.index),
      # ## w/ PureCN's none
      expand('results/purecn'+suffix+'/cbs_none/{sample}/{sample}.csv', sample=samples_for_calling.index),

      # # CNVkit's HMM
      # expand('results/cnvkit'+suffix+'/hmm/{sample}_diagram.cnv.pdf', sample=samples_for_calling.index),
      # expand('results/cnvkit'+suffix+'/hmm/{sample}_scatter.cnv.png', sample=samples_for_calling.index),
      # expand('results/cnvkit'+suffix+'/hmm/{sample}.icns', sample=samples_for_calling.index),
      # 'results/cnvkit'+suffix+'/hmm/heatmap.cnv.pdf',
      # # w/ PureCN's PSCBS
      # expand('results/purecn'+suffix+'/hmm_PSCBS/{sample}/{sample}.csv', sample=samples_for_calling.index),
      # ## w/ PureCN's Hclust
      # expand('results/purecn'+suffix+'/hmm_Hclust/{sample}/{sample}.csv', sample=samples_for_calling.index),
      # ## w/ PureCN's none
      # expand('results/purecn'+suffix+'/hmm_none/{sample}/{sample}.csv', sample=samples_for_calling.index),
      


rule save_config:
  input: 
    'config/config.yaml'
  output:
    yaml = saved_config
  priority: 100 # perform rule first
  shell:
    'cp {input} {output.yaml}'
