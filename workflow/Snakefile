import pandas as pd
from pathlib import Path
import os
from scripts.samples_auto import read_sample
from datetime import datetime

# datetime object containing current date and time, used for naming config file
now = datetime.now()
saved_config = 'results/config_used/config_'+now.strftime("%y-%m-%d_%H")+'.yaml'

# load the configuration file
configfile: 'config/config.yaml'

# mask the reference genome? Reference variables used for mapping.
if config['mask_reference']:
  ref_file = Path(config['masked_ref'])
  ref_file_idx = Path(ref_file).with_suffix('.fa.fai')
else:
  ref_file = Path(config['reference'+'_'+config['genome_version']]['fasta'])
  ref_file_idx = Path(config['reference'+'_'+config['genome_version']]['index'])

# load the panel design file
bedpath = Path(config['panel_design'])
bedname = os.path.splitext(os.path.basename(bedpath))[0]

# load sample sheet from a TSV file or create new from samples in 'data' folder
if config['data']['sample_sheet_path']:
  samples = pd.read_csv(config['data']['sample_sheet_path'], index_col = 'sample', sep = '\t')
elif config['samples_in_directory']:
  samples = read_sample(config['data']['samples_in_directory'])
else:
  print('no samples detected')
wc = samples.index # store samples in wildcard


# including UMIs?
if config['contain_UMIs']:
  BAMs_no_PCR_flags = 'results/umi_mapping/{sample}_8_clipbam.bam'
else:
  BAMs_no_PCR_flags = 'results/mapped/{sample}.bam'

# hybrid- or amplicon-capture?
if config['amplicon']:
  BAMs_for_CNV_calling = BAMs_no_PCR_flags
else:
  BAMs_for_CNV_calling = 'results/mapped_marked/{sample}.bam'

# location for BAM indices
BAM_index_for_CNV_calling = BAMs_for_CNV_calling + '.bai'

# location for reference genome indices
stem = str(Path('resources') / 'reference' / ref_file.stem)

# first run with generic reference or second run with PON for CNVkit?
if config['pon']['second_run_with_pon']:
  suffix = '_'+config['pon']['directory_suffix']+'_pon' # add results to new folders with suffix
else:
  suffix=''
  include: 'rules/trimming_fastqc.smk'
  include: 'rules/map_bwa.smk'
  include: 'rules/umi_mapping.smk'
  include: 'rules/mutect2.smk'
  include: 'rules/qc_map.smk'
  include: 'rules/stats.smk'
  include: 'rules/map_bowtie2.smk'
  include: 'rules/bcf.smk'
  include: 'rules/mask_ref.smk'

# include in any case
include: 'rules/cnvkit.smk'
include: 'rules/purecn.smk'

if config['pon_rds']['use_true_pon_instead']:
  include: 'rules/cnv_calling_with_true_pon.smk'
  rule all:
    input:
      expand('results/cnv_calling_with_true_pon/purecn/CBS/{sample}/{sample}.csv', sample=wc)
else:
  rule all:
    input:
      # CNVkit's CBS
      expand('results/cnvkit'+suffix+'/cbs/{sample}_diagram.cnv.pdf', sample=wc),
      expand('results/cnvkit'+suffix+'/cbs/{sample}_scatter.cnv.pdf', sample=wc),
      expand('results/cnvkit'+suffix+'/cbs/{sample}.icns', sample=wc),
      'results/cnvkit'+suffix+'/cbs/heatmap.cnv.pdf',
      ## w/ PureCN's PSCBS
      expand('results/purecn'+suffix+'/cbs_PSCBS/{sample}/{sample}.csv', sample=wc),
      ## w/ PureCN's Hclust
      expand('results/purecn'+suffix+'/cbs_Hclust/{sample}/{sample}.csv', sample=wc),
      ## w/ PureCN's none
      expand('results/purecn'+suffix+'/cbs_none/{sample}/{sample}.csv', sample=wc),

      # CNVkit's HMM
      expand('results/cnvkit'+suffix+'/hmm/{sample}_diagram.cnv.pdf', sample=wc),
      expand('results/cnvkit'+suffix+'/hmm/{sample}_scatter.cnv.pdf', sample=wc),
      expand('results/cnvkit'+suffix+'/hmm/{sample}.icns', sample=wc),
      'results/cnvkit'+suffix+'/hmm/heatmap.cnv.pdf',
      ## w/ PureCN's PSCBS
      expand('results/purecn'+suffix+'/hmm_PSCBS/{sample}/{sample}.csv', sample=wc),
      ## w/ PureCN's Hclust
      expand('results/purecn'+suffix+'/hmm_Hclust/{sample}/{sample}.csv', sample=wc),
      ## w/ PureCN's none
      expand('results/purecn'+suffix+'/hmm_none/{sample}/{sample}.csv', sample=wc),
      
      # for QC analysis only
      # 'results/qc_map_bwa/multiqc_report.html', # mapping QC with qualimap:
      #'results/qc/multiqc_report_fastqc.html', # qc report for reads, untrimmed and trimmed
      
      # save the used configuration file
      saved_config,


rule save_config:
  input: 
    'config/config.yaml'
  output:
    yaml = saved_config
  priority: 100 # perform rule first
  shell:
    'cp {input} {output.yaml}'
